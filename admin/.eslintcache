[{"/app/src/reportWebVitals.js":"1","/app/src/App.js":"2","/app/src/index.js":"3","/app/src/Auth/AuthProvider.js":"4","/app/src/Auth/Login.js":"5"},{"size":362,"mtime":1609543858983,"results":"6","hashOfConfig":"7"},{"size":1802,"mtime":1609802378242,"results":"8","hashOfConfig":"7"},{"size":449,"mtime":1609801729061,"results":"9","hashOfConfig":"7"},{"size":1707,"mtime":1609802787750,"results":"10","hashOfConfig":"7"},{"size":4949,"mtime":1609799937154,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mi57mv",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/reportWebVitals.js",[],"/app/src/App.js",["24"],"import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { HydraAdmin, ResourceGuesser, hydraDataProvider as baseHydraDataProvider, fetchHydra as baseFetchHydra, useIntrospection } from \"@api-platform/admin\";\nimport parseHydraDocumentation from \"@api-platform/api-doc-parser/lib/hydra/parseHydraDocumentation\";\nimport authProvider from \"./Auth/AuthProvider\";\n\nconst entrypoint = `${process.env.REACT_APP_API_URL}/docs`;\nconst getHeaders = () => localStorage.getItem(\"token\") ? {\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n} : {};\n\nconst fetchHydra = (url, options = {}) =>\n    baseFetchHydra(url, {\n        ...options,\n        headers: getHeaders,\n    });\n\nconst RedirectToLogin = () => {\n    const introspect = useIntrospection();\n\n    if (localStorage.getItem(\"token\")) {\n        introspect();\n        return <></>;\n    }\n    return <Redirect to=\"/login\" />;\n};\n\nconst apiDocumentationParser = async (entrypoint) => {\n    try {\n        const { api } = await parseHydraDocumentation(entrypoint, { headers: getHeaders });\n        return { api };\n    } catch (result) {\n        if (result.status === 401) {\n            // Prevent infinite loop if the token is expired\n            localStorage.removeItem(\"token\");\n\n            return {\n                api: result.api,\n                customRoutes: [\n                    <Route path=\"/\" component={RedirectToLogin} />\n                ],\n            };\n        }\n\n        throw result;\n    }\n};\n\nconst dataProvider = baseHydraDataProvider(entrypoint, fetchHydra, apiDocumentationParser);\n\nexport default () => (\n    <HydraAdmin\n        dataProvider={ dataProvider }\n        authProvider={ authProvider }\n        entrypoint={ entrypoint }\n    >\n        <ResourceGuesser name=\"books\" />\n    </HydraAdmin>\n);\n","/app/src/index.js",[],"/app/src/Auth/AuthProvider.js",["25"],"import jwtDecode from \"jwt-decode\";\n\nexport default {\n    login: ({ username, password }) => {\n\n        const request = new Request(\n            `${process.env.REACT_APP_API_URL}/login`,\n            {\n                method: \"POST\",\n                body: new URLSearchParams({\n                    'email': username,\n                    'password': password,\n                }),\n                headers: new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' }),\n            }\n        );\n        return fetch(request)\n            .then((response) => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(({ token }) => {\n                localStorage.setItem(\"token\", token);\n            });\n    },\n    logout: () => {\n        localStorage.removeItem(\"token\");\n        return Promise.resolve();\n    },\n    checkAuth: () => {\n        try {\n            if (\n                !localStorage.getItem(\"token\") ||\n                new Date().getTime() / 1000 >\n                jwtDecode(localStorage.getItem(\"token\"))?.exp\n            ) {\n                return Promise.reject();\n            }\n            return Promise.resolve();\n        } catch (e) {\n            // override possible jwtDecode error\n            return Promise.reject();\n        }\n    },\n    checkError: (err) => {\n        if ([401, 403].includes(err?.status || err?.response?.status)) {\n            localStorage.removeItem(\"token\");\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    getPermissions: () => Promise.resolve(),\n};\n","/app/src/Auth/Login.js",[],{"ruleId":"26","severity":1,"message":"27","line":51,"column":1,"nodeType":"28","endLine":59,"endColumn":3},{"ruleId":"26","severity":1,"message":"29","line":3,"column":1,"nodeType":"28","endLine":55,"endColumn":3},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default"]